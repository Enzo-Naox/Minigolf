//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputAction/AllControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AllControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AllControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AllControl"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""8fe9c349-c48b-4a5c-be7a-09d8e27073f9"",
            ""actions"": [
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""da0c4d7d-2d9e-4d6e-b60f-ec268fff196d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""b4c833f9-691e-4f5d-bff6-f8906964e983"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c3b9f3a3-870f-47d8-839a-73ff6063affe"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6d19f0c-cda7-4c77-8150-c948496a82b1"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ball"",
            ""id"": ""101ce72a-f9aa-448f-a3e2-ecaedee2ca2a"",
            ""actions"": [
                {
                    ""name"": ""AddPower"",
                    ""type"": ""Button"",
                    ""id"": ""3ea5318d-b103-41a9-b000-3cdd8092d7dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelPower"",
                    ""type"": ""Button"",
                    ""id"": ""ed0bc5d6-9d3d-4f7c-92e2-3302fbf05203"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""33d59e96-ab72-4ad5-b671-e13e22087505"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74602885-c9be-4c80-8dde-4b82059b4298"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Supprimer"",
            ""id"": ""01cb40d4-067e-46ab-819c-631bc0cd029e"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""f84f1baa-2c78-4ad7-923f-d276e40667fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30a95904-7b88-4928-b7ae-fe1966991b93"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hud"",
            ""id"": ""48f92a9e-b7f2-4148-bf1b-43e316a6bbe6"",
            ""actions"": [
                {
                    ""name"": ""Tuto"",
                    ""type"": ""Value"",
                    ""id"": ""5fb17fb7-ff1d-45be-8416-f02100113c8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6ada1b73-8147-4c53-8d10-de65f1469ea2"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tuto"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_RightClick = m_Camera.FindAction("RightClick", throwIfNotFound: true);
        m_Camera_Look = m_Camera.FindAction("Look", throwIfNotFound: true);
        // Ball
        m_Ball = asset.FindActionMap("Ball", throwIfNotFound: true);
        m_Ball_AddPower = m_Ball.FindAction("AddPower", throwIfNotFound: true);
        m_Ball_CancelPower = m_Ball.FindAction("CancelPower", throwIfNotFound: true);
        // Supprimer
        m_Supprimer = asset.FindActionMap("Supprimer", throwIfNotFound: true);
        m_Supprimer_Escape = m_Supprimer.FindAction("Escape", throwIfNotFound: true);
        // Hud
        m_Hud = asset.FindActionMap("Hud", throwIfNotFound: true);
        m_Hud_Tuto = m_Hud.FindAction("Tuto", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_RightClick;
    private readonly InputAction m_Camera_Look;
    public struct CameraActions
    {
        private @AllControl m_Wrapper;
        public CameraActions(@AllControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightClick => m_Wrapper.m_Camera_RightClick;
        public InputAction @Look => m_Wrapper.m_Camera_Look;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Ball
    private readonly InputActionMap m_Ball;
    private List<IBallActions> m_BallActionsCallbackInterfaces = new List<IBallActions>();
    private readonly InputAction m_Ball_AddPower;
    private readonly InputAction m_Ball_CancelPower;
    public struct BallActions
    {
        private @AllControl m_Wrapper;
        public BallActions(@AllControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @AddPower => m_Wrapper.m_Ball_AddPower;
        public InputAction @CancelPower => m_Wrapper.m_Ball_CancelPower;
        public InputActionMap Get() { return m_Wrapper.m_Ball; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BallActions set) { return set.Get(); }
        public void AddCallbacks(IBallActions instance)
        {
            if (instance == null || m_Wrapper.m_BallActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BallActionsCallbackInterfaces.Add(instance);
            @AddPower.started += instance.OnAddPower;
            @AddPower.performed += instance.OnAddPower;
            @AddPower.canceled += instance.OnAddPower;
            @CancelPower.started += instance.OnCancelPower;
            @CancelPower.performed += instance.OnCancelPower;
            @CancelPower.canceled += instance.OnCancelPower;
        }

        private void UnregisterCallbacks(IBallActions instance)
        {
            @AddPower.started -= instance.OnAddPower;
            @AddPower.performed -= instance.OnAddPower;
            @AddPower.canceled -= instance.OnAddPower;
            @CancelPower.started -= instance.OnCancelPower;
            @CancelPower.performed -= instance.OnCancelPower;
            @CancelPower.canceled -= instance.OnCancelPower;
        }

        public void RemoveCallbacks(IBallActions instance)
        {
            if (m_Wrapper.m_BallActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBallActions instance)
        {
            foreach (var item in m_Wrapper.m_BallActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BallActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BallActions @Ball => new BallActions(this);

    // Supprimer
    private readonly InputActionMap m_Supprimer;
    private List<ISupprimerActions> m_SupprimerActionsCallbackInterfaces = new List<ISupprimerActions>();
    private readonly InputAction m_Supprimer_Escape;
    public struct SupprimerActions
    {
        private @AllControl m_Wrapper;
        public SupprimerActions(@AllControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_Supprimer_Escape;
        public InputActionMap Get() { return m_Wrapper.m_Supprimer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SupprimerActions set) { return set.Get(); }
        public void AddCallbacks(ISupprimerActions instance)
        {
            if (instance == null || m_Wrapper.m_SupprimerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SupprimerActionsCallbackInterfaces.Add(instance);
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(ISupprimerActions instance)
        {
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(ISupprimerActions instance)
        {
            if (m_Wrapper.m_SupprimerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISupprimerActions instance)
        {
            foreach (var item in m_Wrapper.m_SupprimerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SupprimerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SupprimerActions @Supprimer => new SupprimerActions(this);

    // Hud
    private readonly InputActionMap m_Hud;
    private List<IHudActions> m_HudActionsCallbackInterfaces = new List<IHudActions>();
    private readonly InputAction m_Hud_Tuto;
    public struct HudActions
    {
        private @AllControl m_Wrapper;
        public HudActions(@AllControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tuto => m_Wrapper.m_Hud_Tuto;
        public InputActionMap Get() { return m_Wrapper.m_Hud; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HudActions set) { return set.Get(); }
        public void AddCallbacks(IHudActions instance)
        {
            if (instance == null || m_Wrapper.m_HudActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HudActionsCallbackInterfaces.Add(instance);
            @Tuto.started += instance.OnTuto;
            @Tuto.performed += instance.OnTuto;
            @Tuto.canceled += instance.OnTuto;
        }

        private void UnregisterCallbacks(IHudActions instance)
        {
            @Tuto.started -= instance.OnTuto;
            @Tuto.performed -= instance.OnTuto;
            @Tuto.canceled -= instance.OnTuto;
        }

        public void RemoveCallbacks(IHudActions instance)
        {
            if (m_Wrapper.m_HudActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHudActions instance)
        {
            foreach (var item in m_Wrapper.m_HudActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HudActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HudActions @Hud => new HudActions(this);
    public interface ICameraActions
    {
        void OnRightClick(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IBallActions
    {
        void OnAddPower(InputAction.CallbackContext context);
        void OnCancelPower(InputAction.CallbackContext context);
    }
    public interface ISupprimerActions
    {
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface IHudActions
    {
        void OnTuto(InputAction.CallbackContext context);
    }
}
